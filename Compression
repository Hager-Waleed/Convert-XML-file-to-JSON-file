#include <iostream>
#include <cstdlib>
#include <vector>
#include <map>
#include <string>
#include <fstream>
#include <sstream>
#include <queue>

using namespace std;
map<char, string> scheme;
string code="";
string out;
queue <char> output;
string sub = "";

#define MAX_TREE_HT 100

// A Huffman tree node
struct MinHeapNode {

	// One of the input characters
	char data;

	// Frequency of the character
	unsigned freq;

	// Left and right child of this node
	struct MinHeapNode* left, * right;
};


struct MinHeap {

	// Current size of min heap
	unsigned size;

	// capacity of min heap
	unsigned capacity;

	// Attay of minheap node pointers
	struct MinHeapNode** array;
};

// A utility function allocate a new
// min heap node with given character
// and frequency of the character
struct MinHeapNode* newNode(char data, unsigned freq)
{
	struct MinHeapNode* temp
		= (struct MinHeapNode*)malloc
		(sizeof(struct MinHeapNode));

	temp->left = temp->right = NULL;
	temp->data = data;
	temp->freq = freq;

	return temp;
}

// A utility function to create
// a min heap of given capacity
struct MinHeap* createMinHeap(unsigned capacity)

{

	struct MinHeap* minHeap
		= (struct MinHeap*)malloc(sizeof(struct MinHeap));

	// current size is 0
	minHeap->size = 0;

	minHeap->capacity = capacity;

	minHeap->array
		= (struct MinHeapNode**)malloc(minHeap->
			capacity * sizeof(struct MinHeapNode*));
	return minHeap;
}

// A utility function to
// swap two min heap nodes
void swapMinHeapNode(struct MinHeapNode** a,
	struct MinHeapNode** b)

{

	struct MinHeapNode* t = *a;
	*a = *b;
	*b = t;
}

// The standard minHeapify function.
void minHeapify(struct MinHeap* minHeap, int idx)

{

	int smallest = idx;
	int left = 2 * idx + 1;
	int right = 2 * idx + 2;

	if (left < minHeap->size && minHeap->array[left]->
		freq < minHeap->array[smallest]->freq)
		smallest = left;

	if (right < minHeap->size && minHeap->array[right]->
		freq < minHeap->array[smallest]->freq)
		smallest = right;

	if (smallest != idx) {
		swapMinHeapNode(&minHeap->array[smallest],
			&minHeap->array[idx]);
		minHeapify(minHeap, smallest);
	}
}

// A utility function to check
// if size of heap is 1 or not
int isSizeOne(struct MinHeap* minHeap)
{

	return (minHeap->size == 1);
}

// A standard function to extract
// minimum value node from heap
struct MinHeapNode* extractMin(struct MinHeap* minHeap)

{

	struct MinHeapNode* temp = minHeap->array[0];
	minHeap->array[0]
		= minHeap->array[minHeap->size - 1];

	--minHeap->size;
	minHeapify(minHeap, 0);

	return temp;
}

// A utility function to insert
// a new node to Min Heap
void insertMinHeap(struct MinHeap* minHeap,
	struct MinHeapNode* minHeapNode)

{

	++minHeap->size;
	int i = minHeap->size - 1;

	while (i && minHeapNode->freq < minHeap->array[(i - 1) / 2]->freq) {

		minHeap->array[i] = minHeap->array[(i - 1) / 2];
		i = (i - 1) / 2;
	}

	minHeap->array[i] = minHeapNode;
}

// A standard function to build min heap
void buildMinHeap(struct MinHeap* minHeap)

{

	int n = minHeap->size - 1;
	int i;

	for (i = (n - 1) / 2; i >= 0; --i)
		minHeapify(minHeap, i);
}


void printArr(int arr[], int n)
{
	
	int i;
	for (i = 0; i < n; ++i) {
		cout << arr[i];
		
	}

	cout << "\n";
	
}


int isLeaf(struct MinHeapNode* root)

{

	return !(root->left) && !(root->right);
}


struct MinHeap* createAndBuildMinHeap(char data[], int freq[], int size)

{

	struct MinHeap* minHeap = createMinHeap(size);

	for (int i = 0; i < size; ++i)
		minHeap->array[i] = newNode(data[i], freq[i]);

	minHeap->size = size;
	buildMinHeap(minHeap);

	return minHeap;
}

// The main function that builds Huffman tree
struct MinHeapNode* buildHuffmanTree(char data[], int freq[], int size)

{
	struct MinHeapNode* left, * right, * top;

	
	struct MinHeap* minHeap = createAndBuildMinHeap(data, freq, size);

	// Iterate while size of heap doesn't become 1
	while (!isSizeOne(minHeap)) {

		// Step 2: Extract the two minimum
		// freq items from min heap
		left = extractMin(minHeap);
		right = extractMin(minHeap);

		
		top = newNode('$', left->freq + right->freq);

		top->left = left;
		top->right = right;

		insertMinHeap(minHeap, top);
	}

	// Step 4: The remaining node is the
	// root node and the tree is complete.
	return extractMin(minHeap);
}


void printCodes(struct MinHeapNode* root, int arr[], int top)

{

	// Assign 0 to left edge and recur
	if (root->left) {

		arr[top] = 0;
		printCodes(root->left, arr, top + 1);
	}

	// Assign 1 to right edge and recur
	if (root->right) {

		arr[top] = 1;
		printCodes(root->right, arr, top + 1);
	}

	
	if (isLeaf(root)) {

		cout << root->data << ": ";

		char character = root->data;
		printArr(arr, top);
		cout << "\n";
		
		for (int i = 0; i < top;++i) {
		
			code += to_string(arr[i]);

		}
		
		scheme[character] = code;
		code = "";

	}
}


void HuffmanCodes(char data[], int freq[], int size)

{
	// Construct Huffman Tree
	struct MinHeapNode* root
		= buildHuffmanTree(data, freq, size);

	// Print Huffman codes using
	// the Huffman tree built above
	int arr[MAX_TREE_HT], top = 0;

	printCodes(root, arr, top);
}


void decode(string file,map<char, string> scheme_code) {

	fstream file1;
	string original="";
	map <string, char> reverse_scheme;
	string code;
	int length = 1;
	//filling the coding scheme into another map with reverse order
	//where now the code is the key of the map

	for (map <char, string>::iterator im = scheme_code.begin(); im != scheme_code.end(); im++) {

		reverse_scheme[im->second] = im->first;
		
	}

	int string_length = file.length();

	for (int i = 0; i <= string_length; i=i) {

		for (length = 1; length <= string_length - i + 1; length++) {

			code = file.substr(i, length); // cut the string

			if (reverse_scheme.count(code)!=0) { // check if the cutted string exists in the reverse code map
				
				cout << reverse_scheme[code];
				original += reverse_scheme[code];
				break;
			}

		}
		
		i += (length);


	}

	file1.open("final", ios::out);
	if (!file1) {

		cout << "File not Created";

	}

	else {

		cout << "Created Sucessfully";
		for (int i = 0; i < original.length(); i++) {

			file1 << original[i];
			

		}

	}
	file1.close();
}

void Stringtobinary() {

	
	// make output file

	fstream file1;

	char current;
	string cut;
	//convert to characters
	for (int i = 0; i < out.length(); i += 8) {

		if ((i+8)> out.length()) {

			break;

		}
		cut = out.substr(i,8);

		for (int j = 0; j < 8; j++) {

			if (cut[j] == '1') {
				
				current |= (1<<(7-j));

			}

			else {

				current &= ~(1<<(7-j));

			}
			
		}

		output.push(current);
		cout << cut;
	}

	file1.open("file2", ios::out);
	if (!file1) {

		cout << "File not Created";

	}

	else {

		cout << "Created Sucessfully";
		
		for (int i = 0; output.size() != 0;i++) {

			file1 << output.front();
			output.pop();

		}
	}
	file1.close();
}

void binarytostring() {

	
	string file;
	fstream my_file;

	my_file.open("C:/Users/ahmed/source/repos/Compress/Compress/file2", ios::in);

	if (!my_file) {

		cout << "No such file";

	}
	else {

		char ch;

		while (1) {
			my_file >> ch;

			if (my_file.eof())
				break;
			file += ch;

			//cout << ch;
		}

	}
	my_file.close();


	for (int i = 0; i < file.length();i++) {

		for (int j = 0; j < 8; j++) {

			if ((file[i] >> (7 - j))&1 == 1) {

				sub += '1';

			}
			else {

				sub += '0';

			}
			
		}
		
		
	}
	
	cout << sub;
	fstream file1;
	file1.open("binaryback", ios::out);
	if (!file1) {

		cout << "File not Created";

	}

	else {

		cout << "Created Sucessfully";

		for (int i = 0; i<sub.length() ; i++) {

			file1 << sub[i];

		}
	}
	file1.close();

}

// Driver code
int main()
{
	string file, output;

	fstream my_file;

	my_file.open("D:/Col/3rd comp/2nd Term/DS/data/data-sample.xml", ios::in);

	if (!my_file) {

		cout << "No such file";

	}
	else {
		char ch;

		while (1) {
			my_file >> ch;
			
			if (my_file.eof())
				break;
			file += ch;

			//cout << ch;
		}

	}
	my_file.close();

	//getline(cin, file);
	int string_length = file.length();
	map <char, int> ch;
	char current_letter;
	int frequency;
	for (int i = 0; i < string_length; i++) {

		current_letter = file[i];

		if (ch.count(current_letter) == 0) {

			ch[current_letter] = 1; // add the character if this is first time to encounter it

		}

		else {

			frequency = ch[current_letter];
			frequency++;
			ch[current_letter] = frequency; // increase the character frequency in the map

		}
	}

	char* characters = new char[ch.size()];
	int* frequencies = new int[ch.size()];

	int counter = 0;

	for (map <char, int>::iterator im = ch.begin(); im != ch.end(); im++) {

		characters[counter] = im ->first;
		frequencies[counter] = im ->second;
		counter++;
	}
	
	HuffmanCodes(characters, frequencies, ch.size());

	cout << "\n";

	for (int i = 0; i < string_length;i++) {

		cout << scheme[file[i]];// cout the codded string in binary
		out += scheme[file[i]];
		//output += scheme[file[i]];
	}
	
	cout << "\n";
	cout << "\n";
	Stringtobinary();
	binarytostring();
	decode(sub,scheme);

	return 0;
}
